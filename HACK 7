int contains(const int *arr, int size, int x) {
    if(arr == NULL) {
        return NULL_ERROR;
    }

    if(size <= 0) {
        return EMPTY_ARRAY;
    }

    for(int i=0; i < size; i++) {
        if(arr[i] == x) {
            return true;
        }

    }
    return false;

}



int containsWithin(const int *arr, int size, int x, int i, int j) {
    if(arr == NULL) {
        return NULL_ERROR;
    }

    if(size <= 0) {
        return EMPTY_ARRAY;
    }

    if(i < 0 || i >= size || j < 0 || j >= size || i > j) {
        return BOUND_ERROR;
    }

    for(int k = i; k < j; k++) {
        if(arr[k] == x) {
            return true;
        }
    }
    return false;

}


int * paddedCopy(const int *arr, int oldSize, int newSize) {
    if(arr == NULL) {
        return NULL;
    }

    if(oldSize < 0 || newSize < 0) {
        return NULL;
    }

    if(newSize < oldSize) {
        return NULL;
    }

    int *newArray = malloc(newSize * sizeof(int));
    for(int i=0; i < newSize; i++) {
        if(i < oldSize) {
            newArray[i] = arr[i];
        } else {
            newArray[i] = 0;
        }

    }
    return newArray;


}


void reverse(int *arr, int size) {
    if(arr == NULL) {
        return;
    }

    if(size <= 0) {
        return;
    }

    int startArr = 0;
    int endArr = size - 1;
    while(startArr < endArr) {
        int reverseArr = arr[startArr];
        arr[startArr] = arr[endArr];
        arr[endArr] = reverseArr;
        startArr ++;
        endArr --;

    }

}


int * reverseCopy(const int *arr, int size) {
    if(arr == NULL) {
        return NULL;
    }

    if(size <= 0) {
        return NULL;
    }
    int *newArrayPtr = malloc(size * sizeof(int));
    int origArray = 0;
    int newArray = size - 1 ;
    while(origArray <= newArray) {
        newArrayPtr[newArray] = arr[origArray];
        origArray++;
        newArray--;

    }
    return newArrayPtr;

}


